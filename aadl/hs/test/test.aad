macro wd {
    W wd = #Rd
}

macro xd {
    X xd = #Rd
}

insn ADC_32_addsub_carry { // ADC <Wd>, <Wn>, <Wm>
}

insn ADC_64_addsub_carry { // ADC <Xd>, <Xn>, <Xm>
}

insn SSHLL_asimdshf_L { // SSHLL{2} <Vd>.<Ta>, <Vn>.<Tb>, #<shift>

    suh Suh
    vd Vn
    ta ArrWhole
    vn Vn
    tb ArrWholeHalf
    shift Nat

    vd = #Rd
    #Rd = vd

    vn = #Rn
    #Rn = vn

    suh = case #Q {
        0 -> NoSuh
        1 -> Suh
    }
    #Q = case suh {
        NoSuh -> 0
        Suh -> 1
    }

    ta = case #immh {
        0001 -> 8H
        001x -> 4S
        01xx -> 2D
    }
    tb = case #immh:#Q {
        0001:0 -> 8B
        0001:1 -> 16B
        001x:0 -> 4H
        001x:1 -> 8H
        01xx:0 -> 2S
        01xx:1 -> 4S
    }
    shift = case #immh {
        0001 -> UInt immh:immb - 8
        001x -> UInt immh:immb - 16
        01xx -> UInt immh:immb - 32
    }

}
